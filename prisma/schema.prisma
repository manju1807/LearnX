generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
  relationMode    = "prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id          String       @id @default(uuid())
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean      @default(false)
  categoryId  String?
  category    Category?    @relation(fields: [categoryId], references: [id])
  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notes {
  id              String         @id @default(uuid())
  userId          String
  title           String
  description     String?
  docUrl          String?
  notesCategoryId String?
  isPublished     Boolean        @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  notesCategory   NotesCategory? @relation(fields: [notesCategoryId], references: [id])

  @@index([notesCategoryId])
}

model NotesCategory {
  id    String  @id @default(uuid())
  name  String  @unique
  notes Notes[]
}

//*Tests models

model TestCategory {
  id          String        @id @default(uuid())
  name        String
  Questions   Question[]
  Tests       Test[]
  TestResults TestResults[]
}

model Question {
  id         String       @id @default(uuid())
  question   String
  options    String[]
  correctAns Int
  category   TestCategory @relation(fields: [categoryId], references: [id])
  categoryId String
}

model Test {
  id          String        @id @default(uuid())
  userId      String
  Email       String
  categoryId  String
  category    TestCategory  @relation(fields: [categoryId], references: [id])
  TestResults TestResults?
  TestAttempt TestAttempt[]
}

model TestResults {
  id            String       @id @default(uuid())
  testId        String       @unique
  userId        String
  categoryId    String
  accuracy      Int
  Email         String
  testAttemptId String
  score         Float
  TestDuration  Float
  attempt       TestAttempt  @relation(fields: [testAttemptId], references: [id])
  category      TestCategory @relation(fields: [categoryId], references: [id])
  test          Test         @relation(fields: [testId], references: [id])
}

model TestAttempt {
  id          String        @id @default(uuid())
  testId      String
  userId      String
  Email       String
  categoryId  String
  attemptedAt DateTime      @default(now())
  test        Test          @relation(fields: [testId], references: [id])
  TestResults TestResults[]
}

